# Service name
service: moviecollections-api

# Remove later
useDotenv: true

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Name of the SST app that's deploying our infrastructure
  sstApp: ${self:custom.stage}-moviecollections-infra

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: !ImportValue '${self:custom.sstApp}-TableName'

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - !ImportValue '${self:custom.sstApp}-TableArn'

functions:
  # Test function
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  createUserMovie:
    handler: createUserMovie.main
    events:
      - http:
          path: usermovies
          method: post
          cors: true
          authorizer: aws_iam
  getUserMovie:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - method: GET request
    handler: getUserMovie.main
    events:
      - http:
          path: usermovie/{id}
          method: get
          cors: true
          authorizer: aws_iam
  getUserMovies:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - method: GET request
    handler: getUserMovies.main
    events:
      - http:
          path: usermovies
          method: get
          cors: true
          authorizer: aws_iam

  deleteUserMovie:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - method: DELETE request
    handler: deleteUserMovie.main
    events:
      - http:
          path: usermovie/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  updateUserMovie:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - method: PUT request
    handler: updateUserMovie.main
    events:
      - http:
          path: usermovie/{id}
          method: put
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # Cognito Identity Pool Policy
  - ${file(resources/cognito-policy.yml)}